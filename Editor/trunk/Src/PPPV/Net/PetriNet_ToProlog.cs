using System;
using System.IO;
using System.Text;
using System.Reflection;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

using PPPV.Editor;
using PPPV.Utils;

namespace PPPV.Net {
   public partial class PetriNet:IXmlSerializable {
      public string ToProlog(){
         StringBuilder text = new StringBuilder(2000);
         text.AppendFormat("%This file is generated by pnml2prolog programm v. {0}.", Assembly.GetExecutingAssembly().GetName().Version.ToString());
         text.AppendLine();
         text.AppendLine("%Changes to this file may cause incorrect behavior. Manual editing, only for experts.");
         text.AppendLine();
         text.AppendFormat("netname('{0}').", ID);
         text.AppendLine();
         text.AppendFormat("nettype('{0}').", Type);
         text.AppendLine();
         text.AppendLine();
         text.Append(TransitionsList());
         text.AppendLine();
         text.Append(PlacesList());
         text.AppendLine();
         text.AppendLine("%initial marking");
         text.AppendLine();
         text.AppendFormat("init({0}).", InitialMarking());
         text.AppendLine();
         text.AppendLine("%transitions semantic");
         text.AppendLine();
         foreach (Transition tr in this.Transitions){
            text.AppendFormat("arc(S0,{0},S2):-remove({1},S0,S1),{2}insert({3},S1,S2).",
                              tr.Name.ToLower(),
                              Precondition(tr),
                              (tr.GuardFunction!=""?tr.GuardFunction+",":""),
                              Postcondition(tr)
                             );
            text.AppendLine();
         }
         /*TODO: Проверить а есть ли дополнительный код*/
         if(this.AdditionalCode.Length != 0){
            text.AppendLine("%additional code");
            text.AppendLine();
            text.Append(this.AdditionalCode);
         }
         return text.ToString();
      }

      public string InitialMarking(){
         StringBuilder text = new StringBuilder(400);
         foreach(Place pl in this.Places){
            foreach(Token token in pl.Tokens){
               text.AppendFormat("{0}({1}),", pl.Name.ToLower(), token.Text);
            }
         }
         if( text.Length > 0 )
            text.Remove(text.Length-1,1);
         text.Append("]");
         text.Insert(0, "[");
         return text.ToString();
      }

      public string TransitionsList(){
         StringBuilder text = new StringBuilder(400);
         foreach (Transition transition in this.Transitions){
            text.AppendFormat("transition({0}).", transition.Name.ToLower());
            text.AppendLine();
         }
         return text.ToString();
      }

      public string PlacesList(){
         StringBuilder text = new StringBuilder(400);
         foreach (Place place in Places){
            text.AppendFormat("place({0}).", place.Name.ToLower());
            text.AppendLine();
         }
         return text.ToString();
      }

      public string Precondition(Transition inTr){
         StringBuilder text = new StringBuilder(100);
         foreach (Arc arc in Arcs){
            if (arc.Target == inTr){
               foreach(Place place in Places){
                  if(place == arc.Source){
                     foreach(string predicate in arc.Cortege){
                        text.AppendFormat("{0}({1}),",place.Name.ToLower(), predicate);
                     }
                  }
               }
            }
         }
         if(text.Length >0 )
            text.Remove(text.Length-1,1);
         text.Append("]");
         text.Insert(0, "[");
         return text.ToString();
      }

      public string Postcondition(Transition inTr){
         StringBuilder text = new StringBuilder(100);
         foreach (Arc arc in Arcs){
            if (arc.Source == inTr){
               foreach(Place place in Places){
                  if(place == arc.Target){
                     foreach(string predicate in arc.Cortege){
                        text.AppendFormat("{0}({1}),", place.Name.ToLower(), predicate);
                     }
                  }
               }
               
            }
         }
         if(text.Length >0 )
            text.Remove(text.Length-1,1);
         text.Append("]");
         text.Insert(0, "[");
         return text.ToString();
      }
   } // PetriNet
} // namespace
