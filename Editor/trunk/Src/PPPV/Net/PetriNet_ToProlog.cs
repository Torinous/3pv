using System;
using System.IO;
using System.Text;
using System.Reflection;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

using PPPV.Editor;
using PPPV.Utils;

namespace PPPV.Net {
   public partial class PetriNet:IXmlSerializable {
      public string ToProlog(){
         StringBuilder text = new StringBuilder(2000);
         text.AppendFormat("%This file is generated by pnml2prolog programm v. {0}.", Assembly.GetExecutingAssembly().GetName().Version.ToString());
         text.AppendLine();
         text.AppendLine("%Changes to this file may cause incorrect behavior. Manual editing, only for experts.");
         text.AppendLine();
         text.AppendFormat("netname('{0}').", ID);
         text.AppendLine();
         text.AppendFormat("nettype('{0}').", Type);
         text.AppendLine();
         text.AppendLine();
         text.Append(TransitionsList());
         text.AppendLine();
         text.Append(PlacesList());
         text.AppendLine();
         text.AppendLine("%initial marking");
         text.AppendLine();
         text.AppendFormat("init({0}).", InitialMarking());
         text.AppendLine();
         text.AppendLine("%transitions semantic");
         text.AppendLine();
         foreach (Transition tr in this.Transitions){
            text.AppendFormat("arc(S0,{0},S2):-{2}remove({1},S0,S1),insert({3},S1,S2).", tr.name[0].value, Precondition(tr.id), Guard(tr.id), Postcondition(tr.id));
            text.AppendLine();
         }
         text.AppendLine("%additional code");
         text.AppendLine();
         text.Append(AdditionalCode());
         return text.ToString();
      }

      public string InitialMarking(){
         StringBuilder text = new StringBuilder(400);
         foreach(Place pl in Places){
            if(pl.Tokens.Size != 0){
               foreach(Token token in pl.Tokens){
                  text.AppendFormat("{0}{1},",pl.name[0].value.ToLower(),Token.value);
               }
            }
         }
         text.Remove(text.Length-1,1);
         text.Append("]");
         text.Insert(0, "[");
         return text.ToString();
      }

      public string TransitionsList(){
         StringBuilder text = new StringBuilder(400);
         foreach (pnmlNetTransition tr in ((pnmlNet)this.Items[0]).transition){
            text.AppendFormat("transition({0}).", tr.name[0].value);
            text.AppendLine();
         }
         return text.ToString();
      }

      public string PlacesList(){
         StringBuilder text = new StringBuilder(400);
         foreach (pnmlNetPlace Place in ((pnmlNet)this.Items[0]).place){
            text.AppendFormat("place({0}).", Place.name[0].value.ToLower());
            text.AppendLine();
         }
         return text.ToString();
      }

      public string Precondition(string inTr){
         StringBuilder text = new StringBuilder(100);
         foreach (pnmlNetArc arc in ((pnmlNet)this.Items[0]).arc){
            if (arc.target == inTr){
               foreach(pnmlNetPlace pl in ((pnmlNet)this.Items[0]).place){
                  if(pl.id == arc.source){
                     foreach(pnmlNetArcPredicate pr in arc.predicate){
                        //MessageBox.Show(text.ToString());
                        text.AppendFormat("{0}{1},",pl.name[0].value.ToLower(),pr.value);
                     }
                  }
               }
            }
         }
         text.Remove(text.Length-1,1);
         text.Append("]");
         text.Insert(0, "[");
         return text.ToString();
      }
      public string Postcondition(string inTr)
      {
         StringBuilder text = new StringBuilder(100);
         foreach (pnmlNetArc arc in ((pnmlNet)this.Items[0]).arc){
            if (arc.source == inTr){
               foreach(pnmlNetPlace pl in ((pnmlNet)this.Items[0]).place){
                  if(pl.id == arc.target){
                     foreach(pnmlNetArcPredicate pr in arc.predicate){
                        text.AppendFormat("{0}{1},",pl.name[0].value.ToLower(),pr.value);
                     }
                  }
               }
               
            }
         }
         text.Remove(text.Length-1,1);
         text.Append("]");
         text.Insert(0, "[");
         return text.ToString();
      }
      public string Guard(string TrId)
      {
         StringBuilder text = new StringBuilder(400);
         foreach (pnmlNetTransition tr in ((pnmlNet)this.Items[0]).transition){
            if(tr.id == TrId){
               if(tr.guard!=null){
                  foreach(pnmlNetTransitionGuard guard in tr.guard){
                     text.Append(guard.value+",");
                  }
               }
            }
         }
         text.Replace(",,",",");
         return text.ToString();
      }
      public string AdditionalCode()
      {
         StringBuilder text = new StringBuilder();
         foreach (object Ob in this.Items){
            if(Ob.GetType().Equals(typeof(pnmlAdditional_code))){
               pnmlAdditional_codeClose[] code = ((pnmlAdditional_code)Ob).close;
               foreach (pnmlAdditional_codeClose Close in code){
                  text.Append(Close.value);
                  text.AppendLine();
               }
            }
         }
         return text.ToString();
      }
   } // PetriNet
} // namespace
